#!/usr/bin/env bash
# update-gh-pages -- a script to automate GitHub Pages updates
#                    by mirroring trees in master to gh-pages, and
#                       compiling Markdown documents using DocumentUp.
#
# Author: Jaeho Shin <netj@cs.stanford.edu>
# Created: 2013-11-08
set -eu

# figure out where we are and set up PATH
Here=$(dirname "$0")
Here=$(cd "$Here"; pwd -P)
PATH="$Here:$PATH"

# default names and paths
: \
    ${GHPagesRepoPath:=gh-pages} \
    ${GitHubRemote:=origin} \
    ${MasterBranch:=master} \
    ${GHPagesLang:=} \
    #
# default options for DocumentUp
DocumentUpOptions=()

# figure out which GitHub repo this local repo is tied to
GitHubRepo=$(
    set -o pipefail
    git config remote."$GitHubRemote".url |
    sed 's|^.*github\.com[:/]||; s|\.git.*$||'
)
echo "# Updating GitHub Pages for $GitHubRepo"
DocumentUpOptions+=(
    repo="$GitHubRepo"
)

# setup gh-pages branch and clone this to work on gh-pages
localRepoPath=$PWD
if git rev-parse gh-pages &>/dev/null; then
    git branch --track gh-pages remotes/"$GitHubRemote"/gh-pages &>/dev/null || true
    [ -e "$GHPagesRepoPath"/.git ] || git clone . --branch gh-pages "$GHPagesRepoPath"
    cd "$GHPagesRepoPath"
else
    # create a default gh-pages branch in the sub-repo unless a gh-pages branch existed here already
    [ -e "$GHPagesRepoPath"/.git ] || git clone . --no-checkout "$GHPagesRepoPath"
    cd "$GHPagesRepoPath"
    git checkout --orphan gh-pages
    git rm -rf .
    customize "$Here"/template.gh-pages <<-SUBST
	@@GitHubRepo@@=$GitHubRepo
	@@GitHubRepoName@@=${GitHubRepo##*/}
	@@dot@@=.
	SUBST
    chmod +x update.sh
    git add .
    git submodule add https://github.com/jeromegn/DocumentUp.git
    git commit -a -m "First pages commit"
    git push origin gh-pages
fi
# make sure url of origin of $GHPagesRepoPath is $localRepoPath
git config remote.origin.url $localRepoPath

git fetch origin
git checkout gh-pages

mirror-master() {
    local tree=$1
    echo "## Mirroring $tree from $MasterBranch"
    case $tree in
        .)
            git checkout remotes/origin/"$MasterBranch" -- README.md
            git rm --cached README.md
            ;;
        *)
            git rm -rf --cached -- "$tree" || true
            git read-tree --prefix="$tree" remotes/origin/"$MasterBranch":"$tree"
            mkdir -p "$tree"
            git checkout -f -- "$tree"
    esac
    for localmd in "$localRepoPath"/"$tree"/*.{md,mkd,markdown}; do
        [[ -e "$localmd" ]] || continue
        md=${localmd#$localRepoPath/}
        mkdir -p "$(dirname "$md")"
        cp -vf "$localmd" "$md"
    done
}

insert-nav-extras() { true; }

compile-markdown() {
    local tree=$1; shift
    local rootRelPath= input= output= curlArgs=
    case $tree in
        .)
            input=README.md
            rootRelPath=.
            output=preview.html
            ;;
        *)
            if [ -d "$tree" ]; then
                input=README.md
            else
                input=$(basename "$tree")
                tree=$(dirname "$tree")
            fi
            rootRelPath=$(perl -MFile::Spec -e 'print File::Spec->abs2rel(@ARGV)' . "$tree")
            output=index.html
    esac
    curlArgs=(--data-urlencode content@"$input")
    # default args
    [ ${#DocumentUpOptions[@]} -eq 0 ] || set -- "${DocumentUpOptions[@]}" "$@"
    for nameValuePair; do curlArgs+=(--data "$nameValuePair"); done
    (  cd "$tree"
    # use DocumentUp to compile GitHub flavored Markdown into HTML
    echo "## Compiling $input (with DocumentUp)"
    curl -# -X POST "${curlArgs[@]}" http://documentup.com/compiled >"$output"
    {
        # polish DocumentUp style
        echo '/<\/head/i'
        echo '<link rel="stylesheet" href="'"$rootRelPath"'/styles.css">'
        echo '.'
        # language (for auto-hyphenation, etc.)
        [ -z "${GHPagesLang:-}" ] ||
            echo '/<body/s/<body/<body lang="'"$GHPagesLang"'"/'
        # and insert an extra link back to home
        case $tree in
            .)
                ;;
            *)
                echo '/<div id="content">/'
                echo '?</div>?i'
                insert-nav-extras
                echo '.'
        esac
        echo 'wq'
    } | ed "$output" &>/dev/null || true
    case $tree in
        .)
            ;;
        *)
            git add "$input" "$output"
    esac
    )
}

# make sure we do some stuff after compiling the site
onexit() {
    # confirm publishing
    git status || true
    read -p "commit and publish? "

    # first, commit updates to gh-pages repo first and the local repo
    git commit -m "Reflected $MasterBranch updates to gh-pages" || true
    git push origin gh-pages

    # then, push to GitHub
    cd "$localRepoPath"
    [ $(git log "$GitHubRemote"/"$MasterBranch".."$MasterBranch" \
        README.md | wc -l) -eq 0 ] || git push "$GitHubRemote" "$MasterBranch"
    git push --set-upstream "$GitHubRemote" gh-pages
}
trap onexit EXIT


# finally, run the update script for this gh-pages site
if [ -x update.sh ]; then
    . update.sh
else
    # otherwise, simply create a preview for README
    mirror-master .
    compile-markdown . name="${GitHubRepo#*/}"
fi
