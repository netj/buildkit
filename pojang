#!/usr/bin/env bash
# pojang -- build an executable by packing given files and dirs
# Home: http://netj.org/2008/03/pojang
# Author: Jaeho Shin <netj@sparcs.org>
# Created: 2008-03-13
# 
# Usage:
#   pojang EXECUTABLE BASEDIR ENTRY [-TAROPTION] PATH...
# 
#   EXECUTABLE is the path to the executable to be created.
#   BASEDIR is where the following relative PATHs are based on.
#   ENTRY is the path to the command that will receive all the arguments of the
#     pojang'ed executable.
#   PATH is the path to files and directories that will be included in the
#     executable.  ENTRY must be included among them, or you will get a broken
#     executable.
# 
# Example:
#   # Suppose you have a nice `tool' consisting of multiple files.
#   # And, you use it through its `bin/shell', for example:
#   /path/to/tool/bin/shell command1 arg1 arg2 ...
# 
#   # But, it becomes a bit clumsy when you want to carry it around.
#   # This is where `pojang' plays its role.  Make the tool handy by:
#   pojang ~/tool /path/to/tool bin/shell bin/cmd-* lib/*.sh share/*.txt ...
# 
#   # Now, move/copy/share your favorite tool as you do with your files.
#   cp tool mytool-in-a-file
#   ./mytool-in-a-file
#   mv mytool-in-a-file .Trash/
#   scp tool somehost:bin/
set -eu

# show usage
if [ $# -lt 4 ]; then
    sed -ne '/^# Usage:/,/^$/ s/^# //p' <"$0"
    exit 1
fi

Product=$1; shift
BaseDir=$1; shift

# sanitize environment
CDPATH=

# check entry
Entry=$1; shift
if ! [ -f "$BaseDir/$Entry" -a -x "$BaseDir/$Entry" ]; then
    echo "$BaseDir/$Entry is not an executable entry" >&2
    exit 2
fi

# how to calculate its signature
packageId() {
    (
    cd "$BaseDir"
    if type git >/dev/null; then
        find "$@" -type f |
        git hash-object --stdin-paths |
        git hash-object --stdin
    elif type sha1sum >/dev/null; then
        {
        find "$@" -type f | xargs sha1sum
        ls -lR "$@"
        } | sha1sum | sed 's/ .*$//'
    else
        date +%Y%m%d%H%M%S
    fi
    )
} 2>/dev/null

## generate a self-extracting shell script archive
: ${PACKAGENAME:=`basename "$PWD"`}
: ${PACKAGEID:=`packageId "$@"`}
# we need a end-of-package marker
EndMarker=.pojang.$PACKAGEID.o
trap "rm -f $EndMarker" EXIT
echo "$PACKAGEID" >"$BaseDir"/$EndMarker
drvlen=`sed -ne '/<<DRV$/,/^DRV/p' <"$0" | wc -l | tr -d " "`
{
# begin with the pojang driver
cat <<DRV
#!/bin/sh -e
# $PACKAGENAME self-extracting executable
d=/tmp/$PACKAGENAME-\$USER/$PACKAGEID
[ -e \$d.o ] || {
    mkdir -p \$d; tail -n +$drvlen "\$0" | gzip -dq | tar xpf - -C \$d
    o=\$d/$EndMarker
    [ -e \$o ] || { echo "\$0: package corrupt" >&2; exit 255; }
    rm -f \$o; touch \$d.o
}
POJANG_ORIGINAL_COMMAND=\$0 \\
exec \$d/$Entry "\$@"
DRV
echo "# end of pojang driver (https://github.com/netj/BuildKit), content follows:"

# and the tar archive follows
(
cd "$BaseDir"
tar czf - "$@" $EndMarker
)
} >"$Product"
chmod +x "$Product"
