#!/usr/bin/env bash
# watch-modifications -- Watch modifications in given modules
# Author: Jaeho Shin <netj@sparcs.org>
# Created: 2013-04-09
set -eu
shopt -s extglob

# abort if already running
pid="$BUILDDIR"/watch.pid
if [ -s "$pid" ] && ps -o command= -p $(cat "$pid" 2>/dev/null) | grep -q watchmedo; then
    exit 0
else
    rm -f "$pid"
fi

# initialize module modifications
[ -s "$BUILDDIR"/modules ]
xargs <"$BUILDDIR"/modules -I{}  rm -f "$BUILDDIR"/timestamp/{}.lastmodified

# abort if we don't have watchmedo (See: https://pypi.python.org/pypi/watchdog)
type watchmedo &>/dev/null

# close I/O
exec </dev/null >"$BUILDDIR"/watch.log 2>&1
set -m

msg() { echo >&2 "# $(date +%FT%T)" "$@"; }
error() { msg "$@"; }
SRCROOT=$(pwd -P)
coalesce_interval=0.1

# use watchmedo to incrementally update the lastmodified links
watchmedo shell-command --recursive \
    --ignore-patterns="*/.git;*/.git/*;*/.build;*/.build/*;$BUILDDIR;$BUILDDIR/*;$STAGEDIR;$STAGEDIR/*" \
    --command='echo ${watch_event_type} "${watch_src_path}" || kill -TERM $PPID' |
{
    # XXX A workaround for obscured file modified events
    # Sometimes when files are modified with a text editor in some
    # circumstances (e.g., Vim with 'writebackup' option on OS X), events for
    # parent directories are detected instead.  Therefore, we need to translate
    # directory events back to those for actual files contained in it.
    while read event abspath; do
        if [ -d "$abspath" ]; then
            case $event in
                modified)
                    # find which file is modified in the directory
                    for f in "$abspath"/{,.}*; do
                        ! [ -d "$f" ] || continue
                        ! [ "$f" -ot "$abspath" ] || continue
                        #msg "# interpreting instead as modified ${f#$SRCROOT/}"
                        abspath=$f
                        break
                    done
                    ;;
            esac
        fi
        echo "$event $abspath"
    done
} |
{
    # Coalesce a series of "deleted, created, modified" events into a single
    # "modified" event
    while read event abspath; do
        if [ x"$event" = x"deleted" ] && read -t $coalesce_interval event2 abspath2; then
            if [ x"$event2" = x"created" -a x"$abspath2" = x"$abspath" ] && read -t $coalesce_interval event3 abspath3; then
                if ! [ x"$event3" = x"modified" -a x"$abspath3" = x"$abspath" ]; then
                    echo "$event $abspath"
                    echo "$event2 $abspath2"
                fi
                event=$event3 abspath=$abspath3
            else
                echo "$event $abspath"
                event=$event2 abspath=$abspath2
            fi
        fi
        echo "$event $abspath"
    done
} |
(
    msg "### start watching for modifications"
    # watchmedo stays alive although the pipe sink exits, so kill it
    trap 'kill -TERM -$(ps -o pgid= -p $BASHPID | tr -d " ")' EXIT
    # track module modifications from individual file events
    cd "$BUILDDIR"
    reload-module-map() {
        [ watch.modules -ot modules ] || return 0
        msg "## loading module map"
        eval "$(
            echo 'which-module() {'
            sort -r modules | tee watch.modules |
            generate-module-resolver
            echo '}'
        )"
    }
    rescan-modules() {
        msg "## rescanning modules"
        (
        cd "$SRCROOT"
        all-modules >"$BUILDDIR"/modules.scanning
        mv -f "$BUILDDIR"/modules.scanning "$BUILDDIR"/modules
        ) &
    }
    rm -f watch.modules; reload-module-map
    while read -t 1800 -r event abspath; do
        ! [ -L "$abspath" ] || continue
        abspath="$(cd "$(dirname "$abspath")" && pwd -P)/$(basename "$abspath")"
        case $abspath in
            "$BUILDKIT"@(|/*)) continue ;;
            */.build|*/.build/*) continue ;;
            "$SRCROOT") path=. ;;
            *) path=${abspath#$SRCROOT/} ;;
        esac
        module=
        reload-module-map
        # invalidate generated make rules when module metadata is modified
        case $path in
            */.module.install)
                case $event in created|deleted|moved) rescan-modules ;; esac
                rm -fv stage.mk
                module=${path%/*}
                # when module is disappearing, take appropriate actions to clean up
                case $event in deleted)
                    l=timestamp/"$module".lastmodified
                    rm -fv "$l"
                    module=$(which-module "$module") || continue
                esac
                ;;
            */.module.@(build|.depends))
                rm -fv build.mk
                ;;
            */*)
                ;;
            *)
                # stay quiet about events on files at the top $SRCROOT directory
                continue
                ;;
        esac
        if module=${module:-$(which-module "$path")}; then
            # update lastmodified symlinks
            msg "# $event $path"
            p=$abspath
            case $event in
                modified|created)
                    [ -e "$p" ] || p=$(most-recently-modified-files \
                        "$(dirname "$p")" -maxdepth 1 | head -n 1)
                    ;;
                deleted|moved|*)
                    p=$(dirname "$p")
                    ;;
            esac
            l=timestamp/"$module".lastmodified
            if [ "$p" -nt "$l" ]; then
                ld=$(dirname "$l")
                relpath="$(relpath "$ld" "$p")"
                mkdir -p "$ld"
                ln -sfnv "$relpath" "$l"
            fi
        else
            error "ignored $path for not belonging to any module"
        fi
    done
    msg "### stopped watching modifications after timeout"
) &

# record PGID
ps -o pgid= -p "$!" | tr -d ' ' >"$pid"
