#!/usr/bin/env bash
# generate-depends-checker -- Generate a script for checking dependencies
# Usage: generate-depends-checker DEPENDSDIR [MESSAGE_PREFIX]
#
# Author: Jaeho Shin <netj@sparcs.org>
# Created: 2013-05-28
set -eu

DEPENDSDIR=$1
[ -d "$DEPENDSDIR" ] || exit 1

ErrorPrefix=${2:-}
Prefix=${3:-}

# include a shell (bash) script
embed-script() {
    local sh=$1
    echo "  bash -c '"; sh-escape <"$sh"; echo "' \"\$DEPENDSDIR\"/'$(sh-escape "$(basename "$sh")")'"
}


# temporary space for ordering by dependency among dependencies
tmp=$(mktemp -d ${TMPDIR:-/tmp}/generate-depends-checker.XXXXXX)
trap 'rm -rf "$tmp"' EXIT

# enumerate dependencies from the specifications in the correct order
(
    cd "$DEPENDSDIR"
    enumerate() {
        if [ $# -gt 0 ]; then
            local files=() name=
            for name; do files+=("$name".{commands,paths,test.sh}); done
            set -- "${files[@]}"
        else
            set -- *.{commands,paths,test.sh}
        fi
        ls "$@" 2>/dev/null |
        sed 's/\.commands$//; s/\.paths$//; s/\.test\.sh$//;'
    }
    enumerate | sort -u |
    while read -r dep; do
        without-comments "$dep".depends |
        while read -r depdep; do
            if ! [ $(enumerate "$depdep" | wc -l) -gt 0 ]; then
                echo >&2 "$DEPENDSDIR/${dep}.depends: ${depdep}: No such dependency definition"
                touch $tmp/error
            fi
            echo "$depdep" "$dep"
        done
        echo "$dep" '*'
    done |
    tsort | grep -v '^*$' >$tmp/order
)
! [ -e $tmp/error ] || exit 4


# prologue
echo '#!/usr/bin/env bash
set -eu
: ${DEPENDSDIR:?path to the directory for keeping dependencies is required}
msg() { echo "'"$Prefix"'$*"; }
error() { echo >&2 "'"$ErrorPrefix"'$*"; false; }
'

# dependency checker for each dependency declaration
while read -r dep; do
    echo
    echo "### checking dependency $dep"

    # define path for dependency specifications
    dep() { echo "$DEPENDSDIR/$dep.$1"; }

    # define how to prepare the dependency when not found
    echo 'prepare-dependency() {'
    # run shell script if exists
    sh=$(dep sh)
    if [ -r "$sh" ]; then
        echo "  msg 'preparing dependency $dep'"
        preparedFlagEsc=$(sh-escape "$DEPENDSDIR/$dep/.prepared")
        echo "  rm -f '$preparedFlagEsc'"
        embed-script "$sh"
        echo "  touch '$preparedFlagEsc'"
        echo '  return $?'
    fi
    # TODO brew/apt-get/yum install based on uname
    # show instruction if exists
    desc=$(dep txt)
    if [ -r "$desc" ]; then
        echo -n "   echo >&2 '"; sh-escape <"$desc"; echo "'"
    fi
    echo "  false"
    echo '}'

    checker-with-found-or-error() {
        local error=$1
        echo "found || prepare-dependency && found ||"
        echo "  error '$(sh-escape "$error")'"
    }

    # check if all required commands are available
    without-comments "$(dep commands)" |
    while read -r cmd; do
        echo "# check if command $cmd is available"
        echo "found() { type '$(sh-escape "$cmd")' >/dev/null 2>&1; }"
        checker-with-found-or-error \
            "$cmd: command not found for dependency $dep"
    done

    # check if all required paths exists
    without-comments "$(dep paths)" |
    while read -r path; do
        echo "# check if path $path is available"
        echo 'found() { (cd "$DEPENDSDIR" && [ -e '"'$(sh-escape "$path")'"' ]); }'
        checker-with-found-or-error \
            "$path: path not found for dependency $dep"
    done

    # check if all test scripts runs fine
    t=$(dep test.sh)
    if [ -r "$t" ]; then
        echo '# check further requirement for dependency'
        echo 'found() {'
        embed-script "$t"
        echo '}'
        checker-with-found-or-error \
            "unmet requirement for dependency $dep"
    fi

    echo "msg 'found dependency $(sh-escape "$dep")'"
done <$tmp/order
