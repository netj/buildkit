#!/usr/bin/env bash
# generate-depends-checker -- Generate a script for checking dependencies
# Usage: generate-depends-checker DEPENDSDIR [MESSAGE_PREFIX]
#
# Author: Jaeho Shin <netj@sparcs.org>
# Created: 2013-05-28
set -eu

DEPENDSDIR=$1
[ -d "$DEPENDSDIR" ] || exit 1

Prefix=${2:-}

# filter out all comments from given files
without-comments() {
    local f=
    for f; do
        [ -r "$f" ] || continue
        sed 's/#.*$//; /^[ 	]*$/d' "$f"
    done
}

# escape for enclosing in shell's single quote literal
esc() {
    if [ $# -gt 0 ]; then
        local arg=
        for arg; do
            echo "${arg//\'/\'\\\'\'}"
        done
    else
        sed "s/'/'\\''/g"
    fi
}

# enumerate dependencies from the specifications
(
    cd "$DEPENDSDIR"
    for f in *.{commands,paths,test.sh}; do
        [ -e "$f" ] || continue
        echo "${f%.*}"
    done
) | sort -u |
{
echo '#!/usr/bin/env bash
set -eu
msg() { echo "'"$Prefix"'$*"; }
error() { msg >&2 "$@"; false; }
'
while read -r dep; do
    echo
    echo "### checking dependency $dep"

    # define path for dependency specifications
    dep() { echo "$DEPENDSDIR/$dep.$1"; }

    # define how to prepare the dependency when not found
    echo 'prepare-dependency() {'
    # run shell script if exists
    sh=$(dep sh)
    if [ -r "$sh" ]; then
        echo "  msg 'preparing dependency $dep'"
        echo "  bash -c '"; esc <"$sh"; echo "'"
        echo '  return $?'
    fi
    # TODO brew/apt-get/yum install based on uname
    # show instruction if exists
    desc=$(dep txt)
    if [ -r "$desc" ]; then
        echo -n "   echo '"; esc <"$desc"; echo "'"
    fi
    echo "  false"
    echo '}'

    checker-with-found-or-error() {
        local error=$1
        echo "found || prepare-dependency && found ||"
        echo "  error '$error'"
    }

    # check if all required commands are available
    without-comments "$(dep commands)" |
    while read -r cmd; do
        echo "# check if command $cmd is available"
        echo "found() { type '$(esc "$cmd")' >/dev/null 2>&1; }"
        checker-with-found-or-error \
            "$cmd: command not found for dependency $dep"
    done

    # check if all required paths exists
    without-comments "$(dep paths)" |
    while read -r path; do
        echo "# check if path $path is available"
        echo "found() { (cd '$DEPENDSDIR' && [ -e '$path' ]); }"
        checker-with-found-or-error \
            "$path: path not found for dependency $dep"
    done

    echo "msg 'found dependency $dep'"
done
}
