#!/usr/bin/env bash
# check-build-depends -- Check build dependencies
# Author: Jaeho Shin <netj@sparcs.org>
# Created: 2013-05-28
set -eu

DEPENDSDIR=${1:-$PWD/.depends}
[ -d "$DEPENDSDIR" ] || exit 0
export DEPENDSDIR

without-comments() { sed 's/#.*$//; /^[ 	]*$/d' "$@"; }

# enumerate dependencies from the specifications
(
    cd "$DEPENDSDIR"
    for f in *.{commands,paths}; do echo "${f%.*}"; done
) | sort -u |
while read -r dep; do
    # define path for dependency specifications
    dep() { echo "$DEPENDSDIR/$dep.$1"; }
    # define how to prepare the dependency when not found
    prepare-dependency() {
        # run shell script if exists
        sh=$(dep sh)
        if [ -x "$sh" ]; then
            echo "### BuildKit: preparing dependency $dep"
            "$sh"
            return $?
        fi
        # TODO brew/apt-get/yum install based on uname
        # show instruction if exists
        desc=$(dep txt)
        if [ -r "$desc" ]; then
            cat "$desc" >&2
            return $?
        fi
        false
    }

    failed=$(dep failed)
    rm -f "$failed"
    mark-failed() {
        touch "$failed"
        false
    }

    # check if all required commands are available
    cmds=$(dep commands)
    if [ -r "$cmds" ]; then
        without-comments "$cmds" |
        (set -e; trap mark-failed EXIT
        while read -r cmd; do
            found() { type "$cmd" &>/dev/null; }
            ! found || continue
            ! prepare-dependency || ! found || continue
            echo >&2 "### BuildKit: $cmd: command not found for dependency $dep"
            exit 2
        done
        trap - EXIT)
    fi

    # check if all required paths exists
    paths=$(dep paths)
    if [ -r "$paths" ]; then
        without-comments "$paths" |
        (set -e; trap mark-failed EXIT
        while read -r path; do
            found() { (cd "$DEPENDSDIR" && [ -e "$path" ]); }
            ! found || continue
            ! prepare-dependency || ! found || continue
            echo >&2 "### BuildKit: $path: path not found for dependency $dep"
            exit 4
        done
        trap - EXIT)
    fi

    if ! [ -e "$failed" ]; then
        echo "### BuildKit: found dependency $dep"
    else
        exit 2
    fi
done
