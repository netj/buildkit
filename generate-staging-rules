#!/usr/bin/env bash
# generate-staging-rules -- Generate make rules for staging each module
# Author: Jaeho Shin <netj@sparcs.org>
# Created: 2010-07-24
set -eu

echo '# Make rules for installing modules on stage'
echo -n '# Generated: '; date +%FT%T%:z
echo

dstdirs=()

for Module; do
    echo "# $Module"
    # define module variables for use in destination pathnames
    MODULE_PATH=$Module
    MODULE_NAME=${Module##*/}
    while read line; do
        # discard comments and empty lines
        line=${line%%#*}
        line=${line//[	 ]/ }
        read src dst rest <<<"$line" || continue
        [ -n "$src" -a -n "$dst" ] || continue
        srcname=${src%/}
        # make explicit whether source is a directory or not in its name
        if [ -d "$Module/$src" ]; then src=${src%/}/; fi
        # expand destination pathname
        case $dst in
            */)
            dst+=${srcname##*/}
            ;;
        esac
        dst=`eval echo "$dst"`
        dstdir="\$(STAGEDIR)/${dst%/*}/"
        # generate staging rule
        echo "stage: \$(STAGEDIR)/$dst"
        echo "\$(STAGEDIR)/$dst: $Module/$srcname $dstdir"
        case $src in
            */) # a directory
            # TODO is it better if we make rules for individual files?
            echo "	mkdir -p \$@"
            echo "	stage \$</* \$@/"
            echo "# XXX make doesn't know if files are changed inside a directory"
            echo ".PHONY: \$(STAGEDIR)/$dst"
            ;;
            *) # a file
            echo "	stage \$< \$@"
            ;;
        esac
        # remember destination directory for later
        dstdirs+=("$dstdir")
    done <"$Module"/.module.install 
    echo
done

# generate directory creation rules
if [ ${#dstdirs[@]} -gt 0 ]; then
    echo "# Directories"
    printf '%s\n' "${dstdirs[@]}" | awk '!a[$0]++ {print}' |
    while read dstdir; do
        echo "$dstdir:"
        echo "	mkdir -p \$@"
    done
fi
